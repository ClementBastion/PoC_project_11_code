package com.medhead.emergency.repository;

import com.medhead.emergency.entity.Hospital;
import org.springframework.cache.annotation.Cacheable;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Modifying;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;

/**
 * Repository interface for accessing and managing {@link Hospital} entities.
 *
 * <p>This interface extends {@link JpaRepository} to provide standard CRUD operations,
 * as well as several custom queries for spatial filtering and availability logic.</p>
 *
 * <p>All query implementations are automatically generated by Spring Data JPA.</p>
 *
 * Entity: {@link Hospital} <br>
 * ID type: {@link String} (the hospital's orgId)
 */
public interface HospitalRepository extends JpaRepository<Hospital, String> {

    /**
     * Retrieves all hospitals, optionally using a cache.
     *
     * @return all hospital records from the database
     */
    @Cacheable("allHospitals")
    List<Hospital> findAll();

    /**
     * Finds the nearest hospitals to the given geographic coordinates,
     * ordered by distance using the PostGIS <-> operator (distance in meters).
     *
     * @param latitude the patient's latitude
     * @param longitude the patient's longitude
     * @param limit the maximum number of hospitals to return
     * @return a list of hospital orgIds ordered by proximity
     */
    @Query(value = """
        SELECT h.org_id
        FROM hospital h
        ORDER BY
          h.geom <-> ST_SetSRID(ST_MakePoint(:lon, :lat), 4326)::geography
        LIMIT :limit
        """, nativeQuery = true)
    List<String> findNearest(
            @Param("lat") double latitude,
            @Param("lon") double longitude,
            @Param("limit") int limit
    );

    /**
     * Given a list of hospital IDs, returns only those that have
     * at least one available bed for the specified specialty.
     *
     * @param ids list of hospital IDs to filter
     * @param specialityId the specialty to check availability for
     * @return filtered list of {@link Hospital} entities
     */
    @Query("""
        SELECT DISTINCT h
        FROM Hospital h
        JOIN h.hospitalSpecialities hs
        WHERE h.orgId IN :ids
          AND hs.speciality.id       = :specId
          AND hs.availableBeds      >  0
        """)
    List<Hospital> findAvailableByIdsAndSpecialityId(
            @Param("ids")   List<String> ids,
            @Param("specId") Integer specialityId
    );

    /**
     * Decrements the number of available beds for a given hospital and specialty.
     * Returns the number of rows updated (1 if successful, 0 if no available beds).
     *
     * @param hospitalId the hospital's orgId
     * @param specialityId the specialty ID
     * @return 1 if the decrement was successful, 0 otherwise
     */
    @Modifying
    @Query("""
        UPDATE HospitalSpeciality hs
        SET hs.availableBeds = hs.availableBeds - 1
        WHERE hs.hospital.orgId = :hid
          AND hs.speciality.id = :sid
          AND hs.availableBeds > 0
        """)
    int decrementAvailableBeds(
            @Param("hid") String hospitalId,
            @Param("sid") Integer specialityId
    );

    /**
     * Retrieves hospitals with available beds for the given specialty,
     * ordered by spatial proximity to the provided coordinates using PostGIS.
     *
     * @param lat latitude of the search origin
     * @param lon longitude of the search origin
     * @param specId ID of the medical specialty
     * @param limit maximum number of hospitals to return
     * @return list of {@link Hospital} entities sorted by distance
     */
    @Query(value = """
        SELECT h.*
        FROM hospital h
        JOIN hospital_speciality hs
          ON hs.hospital_org_id = h.org_id
         AND hs.speciality_id   = :specId
         AND hs.available_beds  >  0
        ORDER BY h.geom <-> ST_SetSRID(ST_MakePoint(:lon, :lat),4326)::geography
        LIMIT :limit
        """, nativeQuery = true)
    List<Hospital> findNearestAvailable(
            @Param("lat") double lat,
            @Param("lon") double lon,
            @Param("specId") int specId,
            @Param("limit") int limit
    );
}
